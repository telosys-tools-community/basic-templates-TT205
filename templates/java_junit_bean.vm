/*
 * JUnit test case for bean $entity.name
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder(${TEST_SRC})};


import java.math.BigDecimal;

import $entity.fullName ;

import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test case for bean $entity.name
 * 
 * @author Telosys Tools Generator
 *
 */
#set ( $beanVar = ${entity.name.toLowerCase()} )
public class ${entity.name}Test 
{
	protected static final byte    byteValue    = 1 ;
	protected static final short   shortValue   = 1 ;
	protected static final int     intValue     = 1 ;
	protected static final int     integerValue = 1 ;
	protected static final long    longValue    = 1 ;
	
	protected static final float   floatValue    = 1.234f ;
	protected static final double  doubleValue   = 1.234 ;
	
	protected static final BigDecimal bigdecimalValue = new BigDecimal("12.3456");
	
	protected static final String  stringValue  = "A" ;
	
	protected static final java.util.Date     dateValue         = new java.util.Date();
	protected static final java.sql.Date      sqldateValue      = new java.sql.Date(dateValue.getTime());
	protected static final java.sql.Time      sqltimeValue      = new java.sql.Time(dateValue.getTime());
	protected static final java.sql.Timestamp sqltimestampValue = new java.sql.Timestamp(dateValue.getTime());

	protected static final byte[]  bytesArray  = "ABCD".getBytes() ;

	@Test
	public void testSettersAndGetters() {
		
		System.out.println("Checking class ${entity.name} getters and setters ..." );
		
		${entity.name} ${beanVar} = new ${entity.name}();
		
#foreach( $field in $entity.attributes )
		//--- Test setter/getter for field "$field.name"  ( type : $field.type )
		// System.out.println(" checking field $field.name ..." );
#set ( $type = $field.type.toLowerCase() )
#if ( $type == "byte" || $type == "short" || $type == "int" || $type == "integer" || $type == "long" || $type == "float" || $type == "double" )
		${beanVar}.${field.setter}( ${type}Value ) ;
		Assert.assertTrue( ${type}Value == ${beanVar}.${field.getter}() ) ;
#elseif ( $type == "string" )
		${beanVar}.${field.setter}( stringValue ) ;
		Assert.assertTrue( stringValue.equals( ${beanVar}.${field.getter}() ) ) ;
#elseif ( $type == "bigdecimal" )
		${beanVar}.${field.setter}( bigdecimalValue ) ;
		Assert.assertTrue( bigdecimalValue.equals( ${beanVar}.${field.getter}() ) ) ;
		Assert.assertTrue( bigdecimalValue.compareTo( ${beanVar}.${field.getter}() ) == 0 ) ;
#elseif ( $type == "boolean" )
		${beanVar}.${field.setter}( true ) ;
		Assert.assertTrue( ${beanVar}.${field.getter}() ) ;
		${beanVar}.${field.setter}( false ) ;
		Assert.assertFalse( ${beanVar}.${field.getter}() ) ;
#elseif ( $field.fullType == "java.util.Date" )
		${beanVar}.${field.setter}( dateValue ) ;
		Assert.assertTrue( dateValue.equals( ${beanVar}.${field.getter}() ) );
#elseif ( $field.fullType == "java.sql.Date" )
		${beanVar}.${field.setter}( sqldateValue ) ;
		Assert.assertTrue( sqldateValue.equals( ${beanVar}.${field.getter}() ) );
#elseif ( $field.fullType == "java.sql.Time" )
		${beanVar}.${field.setter}( sqltimeValue ) ;
		Assert.assertTrue( sqltimeValue.equals( ${beanVar}.${field.getter}() ) );
#elseif ( $field.fullType == "java.sql.Timestamp" )
		${beanVar}.${field.setter}( sqltimestampValue ) ;
		Assert.assertTrue( sqltimestampValue.equals( ${beanVar}.${field.getter}() ) );
#elseif ( $field.fullType == "byte[]" )
		${beanVar}.${field.setter}( bytesArray ) ;
		Assert.assertTrue( java.util.Arrays.equals(bytesArray, ${beanVar}.${field.getter}() ) ) ;
#end

#end
		
	}



}
