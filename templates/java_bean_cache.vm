/*
 * Very basic JavaBean cache
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder(${SRC})};

import java.util.Hashtable;
import java.util.Map;

import $entity.fullName ;
#foreach( $import in $entity.importsForKeyFields )
import $import;
#end

/**
 * Very basic cache for ${entity.name} instances (just for the Telosys Tools demo)
 * 
 * @author Telosys Tools Generator
 *
 */
public class ${entity.name}Cache
{
	private final static Map<String,${entity.name}> cache = new Hashtable<String,${entity.name}>() ;
	
#set ( $keyFields = $entity.keyAttributes )
	/**
	 * Build the cache key from the Primary Key field(s)
#foreach( $field in $keyFields ) 
     * @param ${field.name} 
#end	 
	 * @return the key
	 */
##	private final static String getKey( #argumentsWithType($keyFields) ) {
	private final static String getKey( $fn.argumentsListWithType($keyFields) ) {
		return "" #foreach( $field in $keyFields ) + ${field.name} #end ;
	}

	/**
	 * Put the given ${entity.name} instance in the cache
	 * @param ${entity.name} instance to be stored
	 */
#set ( $paramName = ${entity.name.toLowerCase()} )
	public final static void put${entity.name}(${entity.name} ${paramName} ) {
##		String key = getKey( #argumentsWithGetters( ${paramName}, $keyFields) ) ;
		String key = getKey( $fn.argumentsListWithGetter( ${paramName}, $keyFields) ) ;
		cache.put(key, ${entity.name.toLowerCase()} );
	}
	
	/**
	 * Get the ${entity.name} instance for the given primary key
#foreach( $field in $keyFields ) 
     * @param ${field.name} 
#end	 
	 * @return the ${entity.name} instance (or null if none)
	 */
##	public final static ${entity.name} get${entity.name}( #argumentsWithType($keyFields) ) {
	public final static ${entity.name} get${entity.name}( $fn.argumentsListWithType($keyFields) ) {
##		String key = getKey( #arguments($keyFields) ) ;
		String key = getKey( $fn.argumentsList($keyFields) ) ;
		return cache.get(key);
	}

	/**
	 * Removes the ${entity.name} associated with the given primary key
#foreach( $field in $keyFields ) 
     * @param ${field.name} 
#end	 
	 */
##	public final static void remove${entity.name} ( #argumentsWithType($keyFields) ) {
	public final static void remove${entity.name} ( $fn.argumentsListWithType($keyFields) ) {
##		String key = getKey( #arguments($keyFields) ) ;
		String key = getKey( $fn.argumentsList($keyFields) ) ;
		cache.remove(key);
	}
	
	/**
	 * Removes the given ${entity.name} from the cache using its primary key
	 * @param ${entity.name} instance to be removed
	 */
#set ( $paramName = ${entity.name.toLowerCase()} )
	public final static void remove${entity.name} (${entity.name} ${paramName} ) { 
##		String key = getKey( #argumentsWithGetters( ${paramName}, $keyFields) ) ;
		String key = getKey( $fn.argumentsListWithGetter( ${paramName}, $keyFields) ) ;
		cache.remove(key);
	}

}
